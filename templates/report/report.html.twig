{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
<h1>Rapport</h1>
<section>
    <h2 id="kmom01">Kmom01</h2>
    <h3>Erfarenhet av objektorientering</h3>
    <p>Erfarenheten jag har av objektorientering kommer från den tidigare OOPython kursen. I kursen fick jag lära mig
        grunderna i att skapa klasser, instansiera objekt och att använda arv för att skapa strukturerad och
        återanvändbar kod.</p>

    <p>Python vehicle class exempel:</p>
    <pre>
    <code>
    class Vehicle:
        def __init__(self, make, model):
            self.make = make
            self.model = model
    </code>
    </pre>

    <p>PHP vehicle class exempel:</p>
    <pre>
    <code>
    class Vehicle {
        public $make;
        public $model;
    
        public function __construct($make, $model) {
            $this->make = $make;
            $this->model = $model;
        }
    }        
    </code>
    </pre>

    <p>Syntaxen i Python gjorde det enkelt att förstå och lära sig koncepten inom objektorientering men i PHP är det
        annorlunda. Att det behövs mer rader kod, pilar (->) och dollartecken känns jobbigt. Syntaxen kommer ta ett tag
        att vänja sig och det kommer vara frustrerande men jag tror att jag förstår grunden.
    </p>

    <h3>PHPs modell för klasser och objekt</h3>
    <p>
        Grunderna för att programmera objektorienterat i PHP börjar med att förstå klasser och objekt.
    </p>

    <p>En klass kan ses som en mall för att skapa objekt. Objekt kan också kallas en instans av en klass. I klassen
        definieras objektets attribut och beteende. Ett attribut för en hundklass kan till exempel vara vilket namn
        hunden har. Ett beteende(metod) för en sådan klass kan till exempel vara att skälla.</p>

    <p>Åtkomsthantering är också en viktig del av objektorientering. Att markera och avgränsa vilka attribut och metoder
        en användare har tillgång till är viktigt för enkapsulering objektets data. Det leder till säkrare och intakta
        objekt. Genom att använda “Public”,”Private”, och “Protected” kan vi kontrollera åtkomsten.</p>

    <p><code>- Public är tillgängligt både inom och utanför klassen.</code></p>
    <p><code>- Private kan endast nås inom klassen där den deklareras.</code></p>
    <p><code>- Protected är tillgängligt inom klassen och dess underklasser.</code></p>

    <p>Konstruktorer och destruktorer används för att skapa och förstöra instansierade objekt. En konstruktor anropas
        automatiskt när ett nytt objekt skapas. Den initialiserar också objektets attribut med specifika värden.
        Destruktorer anropas automatiskt när ett objekt förstörs för att fria minne.
    </p>

    <p>Arv är viktigt att veta för att förstå att en klass kan ärva egenskaper och metoder från en annan klass. Det kan
        till exempel vara användbart för att återanvända kod och minska upprepning.</p>

    <p>Här är ett exempel på en klass för en hund:</p>

    <pre><code>
    class Dog {
        public $name;
        private $sound = "Woof";
    
        public function __construct($name) {
            $this->name = $name;
        }
    
        public function bark() {
            echo $this->name . " says " . $this->sound;
        }
    }
    
    $myDog = new Dog("Sixten");
    $myDog->bark();
        
    </code></pre>

    <h3>Reflektion över kodbas</h3>
    <p>Jag tycker att kodbasen för uppgiften var svår att förstå till en början. Det var många mappar och filer som jag
        inte riktigt förstod vad de gjorde för att de inte nämns i set up guiden. Men jag har fått en större förståelse
        för Symfony som ramverk. Jag har skapat en webbsida som använder sig av en controller för att servera twig
        template filer och ett litet json api med kända citat.</p>

    <p>Utmaningar jag stött var att lägga till bilder korrekt och att ladda upp sidan på studentservern. När jag
        försökte ladda bilder så visades de inte lokalt men de visades på student server.</p>

    <p>Jag löste det genom att sätta rätt path till filerna i Symfony och installera de paket som behövdes genom npm
        install. I mitt första försök på uppgiften så hade jag inget utrymme kvar på studentservern. Det betydde att jag
        inte kunde ladda upp en kod för att testa den. Nu har jag dock fått mer utrymme.</p>

    <p>Jag har valt att lägga till sass i projektet. Med hjälp av sass så kan jag lätt använda variabler och dela upp
        min scss kod i små moduler för till exempel header, navigation och footer.</p>

    <p>Ett problem jag fortfarande stöter på är felmeddelanden i webbläsarens konsol. Hur jag än försöker så fortsätter
        de poppa upp. Det är något jag måste fixa i framtiden.</p>

    <p>Jag tror att jag förstår de viktiga delarna och flödet för mvc med routes och templates.</p>

    <h3>PHP The Right Way</h3>
    <p>Delarna av PHP The Right Way artikeln jag läst och använt är Getting Started, Coding Practices, Errors and
        Exceptions och Code Style Guide. Getting Started handlade mer om hur jag installerar php och utvecklingsmiljön,
        men det har jag redan gjort.</p>

    <p>Det var intressant att läsa igenom Coding practices. Det gav mig en bättre förståelse för hur man skriver vissa
        delar av php. Tillsammans med kodstil guiden så har jag fått se riktlinjer för de grundläggande
        kodningsstandarder och kodstil regler som finns. Hittills har jag följt de kodexempel vi fått från övningarna.
        Jag kommer nog få mer användning av Code Style Guiden senare när jag skriver mer komplicerade kod bitar.</p>

    <p>Jag läste också om hur jag kan använda phps pakethanterare Composer för att underlätta utvecklingen.</p>

    <p>Artikeln känns som ett bra komplement för en mindre erfaren php utvecklare som mig själv.</p>

    <h3>Today I Learned</h3>
    <p>Min til för detta kursmoment är hur jag kan börja programmera objektorienterat i php och de första grunderna i
        Symfony med routes. Jag tror jag har byggt en bra grund för att fortsätta bygga på rapportsidan.</p>
</section>
<section>
    <h2 id="kmom02">Kmom02</h2>
    <h3>Objektorienterade konstruktioner</h3>
    <h4>Arv</h4>
    <p>Arv används av klasser för att ärva egenskaper och metoder från andra klasser. För att ärva från en annan klass
        används ordet ‘extends’ (förlänga/utöka). Med den nuvarande klassen kan du nu utöka funktionalitet eller
        förändra den.</p>

    <h4>Komposition</h4>
    <p>Komposition betyder att en klass innehåller en eller flera instanser av en annan klass. Ett exempel kan vara en
        kortlek har flera kort eller en bil som har en motor. Det är alltså “har-en” eller “har många” förhållande.</p>

    <h4>Interface</h4>
    <p>Interface kan användas för att specificera metoder som måste finnas i klassen. Interface används för att se till
        att olika klasser följer samma strukturella regler i koden även om de obligatoriska funktionerna kan skrivas
        olika.</p>

    <h4>Trait</h4>
    <p>Trait används för att återanvända kod i klasser. En trait används för att gruppera funktionalitet på ett mer
        flexibelt sätt. En klass kan använda flera traits och flera klasser kan använda en trait.</p>

    <h3>Implementation av uppgiften</h3>
    <p>För att lösa uppgiften skapade jag klasserna Card(Ett spelkort),CardGrapic(För en grafisk representation av ett
        spelkort), DeckOfCards(En kortlek) och CardHand(En hand men kort).</p>

    <p>DeckOfCards och CardHand har ett kompositions förhållande med Card-klassen. Det finns också ett arv av Card
        klassen i CardGrapic.</p>

    <p>För att visa korten med den specifika stilen i kraven så använder jag html och css. Jag tycker korten ser helt
        okej ut just nu, men jag vill lägga till symboler för knekt, drottning och kung. Just nu är det bara bokstäver.
    </p>

    <p>Jag har haft en stor utmaning under uppgiften och det var att få koden att fungera på studentservern. Problemet
        var dock inte med min kod, det var min Firefox webbläsare. Av någon anledning så minskade inte kortleken när jag
        laddade om sidorna för att dra kort. Först trodde jag det berodde på att jag satte hela DeckOfCards objektet i
        session.</p>

    <p>För att lösa problemet så försökte jag först att bara ladda upp arrayen med kort objekt istället. När det inte
        heller fungerade så lade jag till metoder för att skapa en kortlek från en array och en metod för att skapa en
        array med värden som strängar av en kortlek. Det fungerade inte heller.</p>

    <p>När jag tillslut bad en kompis testa min lösning så fungerade det på hans dator. Då bestämde jag mig för att
        testa med Crome som webbläsare och då fungerade det. Av mina lösningar så tror jag att ladda upp en array med
        strängar är smidigare än att ladda upp en array med objekt i session.</p>

    <p>Förbättringar som kan göras är till exempel att slå samman de två draw card rutterna. Efter som de nästan gör
        samma sak (drar ett eller flera kort), men jag lyckades inte med det i detta kursmoment.</p>

    <p>Jag skapade också CardHand klassen utan att använda den. Jag kanske får användning av den i ett senare
        kursmoment.
    </p>

    <h3>Symfony och MVC</h3>
    <p>Att jobba med mvc och Symfony har känts ganska smidigt. Ett problem jag stötte på dock var att skapa routes med
        metoderna GET och POST. Jag fick lösa det genom att rendera en a tag för GET routes och en form submit för
        Routes med POST. Tror det inte är helt korrekt att göra så men det fungerar.
    </p>

    <p>När jag jobbade med arrayer i session så slutade min sida för att visa allt i session att fungera. Den första
        lösningen var att lägga till en __toString metod på DeckOfCards klassen. Men när jag bytte sätt att ladda upp
        till session så kändes den lösningen inte så bra. Jag googlade lite och hittade en komponent i Symfony som heter
        VarDumper. Med den kan jag lätt dumpa all information från session, även arrayer.
    </p>

    <h3>Today I Learned</h3>
    <p>Min til för detta kursmoment är hur jag kan skapa klasser i PHP. Efter mycket krångel så tycker jag att jag
        förstår klasser bättre. Jag tycker det har varit svåra moment hittills och jag hoppas det blir något lättare
        framåt.</p>

</section>
<section>
    <h2 id="kmom03">Kmom03</h2>
</section>
<section>
    <h2 id="kmom04">Kmom04</h2>
</section>
<section>
    <h2 id="kmom05">Kmom05</h2>
</section>
<section>
    <h2 id="kmom06">Kmom06</h2>
</section>
{% endblock %}